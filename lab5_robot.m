clear
deg = pi/180;
L1 = 1;
L2 = 1;
L3 = 1;

L(1) = Revolute('d', L1, 'a', 0, 'alpha', pi/2, ...
    'I', [0, 0, 0], ...
    'm', 0, ...
    'Jm', 1e-4, ...
    'G', 500, ...
    'B', 10e-4, ...
    'Tc', 10e-4, ...
    'qlim', [-180 180]*deg);
L(2) = Revolute('d', 0, 'a', L2, 'alpha', 0,...
    'r', [0.5, 0, 0], ...
    'I', [0.01, 0.8, 0.8], ...
    'm', 10, ...
    'Jm', 1e-4, ...
    'G', 500, ...
    'B', 10e-4, ...
    'Tc', 10e-4, ...
    'qlim', [-90 90]*deg);
L(3) = Revolute('d', 0, 'a', L3, 'alpha', 0,...
    'r', [0.5, 0, 0], ...
    'I', [0.01, 0.8, 0.8], ...
    'm', 10, ...
    'Jm', 1e-4, ...
    'G', 500, ...
    'B', 10e-4, ...
    'Tc', 10e-4, ...
    'qlim', [-90 90]*deg);

RRR_l5 = SerialLink (L,'name', 'RRR l5', 'gravity', [0 -9.807 0]);

home = [0 0 -90*deg];
hold = [0 0 0];
clear L;

figure(1)
RRR_l5.plot(home)
RRR_l5.teach(hold)

RRR_l5.payload(1, [0 0 0]);

jacobian = RRR_l5.jacob0(home);
G = RRR_l5.gravload(home);
torque_home = jacobian.*G

jacobian2 = RRR_l5.jacob0(hold);
G2 = RRR_l5.gravload(hold);
torque_hold = jacobian2.*G2




